= The Reactive Principles and Patterns
:page-layout: home
include::partial$include.adoc[]

_Design Principles for Distributed Applications_





This document provides guidance and techniques established among experienced Reactive practitioners for building individual services, applications, and whole systems. As a companion to the {reactive-manifesto}[Reactive Manifesto], {reactive-manifesto}[{tab}, window="new tab"] it incorporates the ideas, paradigms, methods, and patterns from both Reactive Programming and Reactive Systems into a set of practical principles that software architects and developers can apply in their transformative work. 

Our purpose is to help businesses realize the efficiencies inherent to using Reactive. Our collective experience shows that these principles enable the design and implementation of  highly concurrent and distributed software that is performant, scalable, and resilient, while at the same time conserving resources when deploying, operating, and maintaining it.  Further application of Reactive principles will allow us as a society to depend on software for making our diverse and distributed civilization more robust.
[.home-page-grid]
====

--
[discrete]
== Design Principles for Cloud Native Applications

Learn:::
** How the Reactive approach to Cloud Native provides benefits
** Why Cloud Native infrastructure alone isn't enough to achieve elasticity, scalability, and resilience

[.read-link]
xref:cloud-native:index.adoc[Read More &#8594;]
--

--
[discrete]
== Design Principles for Edge Native Applications

Learn:::
** The constraints Edge Native imposes on design
** How to avoid impedance mismatch between Edge Native and Cloud Native applications

[.read-link]
link:index.html[Read More &#8594;]
--

--
[discrete]
== The Reactive Principles

Learn:::
** What makes a system Reactive
** How to: 

*** Stay responsive
*** Accept uncertainty
*** Embrace failure
*** Build reliability despite unreliable foundations
*** Assert autonomy
*** Tailor consistency
*** Decouple time
*** Decouple space
*** Handle dynamics

[.read-link]
link:principles:index.html[Read More &#8594;]
--

--
[discrete]
== The Reactive Patterns

Learn how the following patterns contribute to Reactive design:::
** Partition State
** Communicate Facts
** Isolate Mutations
** Coordinate Dataflow
** Localize State
** Observe Communications

[.read-link]
link:patterns:index.html[Read More &#8594;]
--

====



Written by Jonas Bonér—with the help of (roughly in the order of level of contributions) Roland Kuhn, Ben Christensen, Sergey Bykov, Clement Escoffier, Peter Vlugter, Josh Long, Ben Hindman, Vaughn Vernon, James Roper, Michael Behrendt, Kresten Krab Thorup, Colin Breck, Allard Buijze, Derek Collison, Viktor Klang, Ben Hale, Steve Gury, Tyler Jewell, Ryland Degnan, James Ward, and Stephan Ewen.

_Version 1.0_ _Published {docdate}_










